/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1351.0, "minX": 0.0, "maxY": 34179.0, "series": [{"data": [[0.0, 1351.0], [0.1, 1351.0], [0.2, 1370.0], [0.3, 1375.0], [0.4, 1377.0], [0.5, 1387.0], [0.6, 1388.0], [0.7, 1444.0], [0.8, 1444.0], [0.9, 1688.0], [1.0, 1695.0], [1.1, 1793.0], [1.2, 1975.0], [1.3, 2091.0], [1.4, 2163.0], [1.5, 2163.0], [1.6, 2291.0], [1.7, 2359.0], [1.8, 2529.0], [1.9, 2552.0], [2.0, 2574.0], [2.1, 2738.0], [2.2, 2738.0], [2.3, 2772.0], [2.4, 2815.0], [2.5, 2860.0], [2.6, 2865.0], [2.7, 2946.0], [2.8, 3062.0], [2.9, 3062.0], [3.0, 3121.0], [3.1, 3260.0], [3.2, 3281.0], [3.3, 3449.0], [3.4, 3604.0], [3.5, 3606.0], [3.6, 3635.0], [3.7, 3635.0], [3.8, 3679.0], [3.9, 3687.0], [4.0, 3690.0], [4.1, 3692.0], [4.2, 3776.0], [4.3, 3851.0], [4.4, 3851.0], [4.5, 4027.0], [4.6, 4086.0], [4.7, 4115.0], [4.8, 4136.0], [4.9, 4179.0], [5.0, 4283.0], [5.1, 4283.0], [5.2, 4344.0], [5.3, 4441.0], [5.4, 4500.0], [5.5, 4564.0], [5.6, 4633.0], [5.7, 4939.0], [5.8, 4939.0], [5.9, 4987.0], [6.0, 5140.0], [6.1, 5292.0], [6.2, 5609.0], [6.3, 5698.0], [6.4, 5747.0], [6.5, 5836.0], [6.6, 5836.0], [6.7, 6078.0], [6.8, 6139.0], [6.9, 6150.0], [7.0, 6241.0], [7.1, 6506.0], [7.2, 8377.0], [7.3, 8377.0], [7.4, 9141.0], [7.5, 11091.0], [7.6, 11653.0], [7.7, 11671.0], [7.8, 12040.0], [7.9, 12456.0], [8.0, 12456.0], [8.1, 12496.0], [8.2, 12945.0], [8.3, 12991.0], [8.4, 13006.0], [8.5, 13170.0], [8.6, 13635.0], [8.7, 13635.0], [8.8, 14258.0], [8.9, 14597.0], [9.0, 14673.0], [9.1, 14985.0], [9.2, 15030.0], [9.3, 15076.0], [9.4, 15171.0], [9.5, 15171.0], [9.6, 15196.0], [9.7, 15308.0], [9.8, 15318.0], [9.9, 15337.0], [10.0, 15412.0], [10.1, 15465.0], [10.2, 15465.0], [10.3, 15474.0], [10.4, 15602.0], [10.5, 15728.0], [10.6, 15838.0], [10.7, 15903.0], [10.8, 16011.0], [10.9, 16011.0], [11.0, 16082.0], [11.1, 16082.0], [11.2, 16251.0], [11.3, 16255.0], [11.4, 16275.0], [11.5, 16291.0], [11.6, 16291.0], [11.7, 16339.0], [11.8, 16348.0], [11.9, 16394.0], [12.0, 16432.0], [12.1, 16532.0], [12.2, 16532.0], [12.3, 16533.0], [12.4, 16533.0], [12.5, 16534.0], [12.6, 16535.0], [12.7, 16555.0], [12.8, 16566.0], [12.9, 16660.0], [13.0, 16675.0], [13.1, 16675.0], [13.2, 16686.0], [13.3, 16706.0], [13.4, 16714.0], [13.5, 16727.0], [13.6, 16728.0], [13.7, 16729.0], [13.8, 16729.0], [13.9, 16729.0], [14.0, 16730.0], [14.1, 16730.0], [14.2, 16745.0], [14.3, 16747.0], [14.4, 16754.0], [14.5, 16754.0], [14.6, 16772.0], [14.7, 16773.0], [14.8, 16777.0], [14.9, 16791.0], [15.0, 16816.0], [15.1, 16838.0], [15.2, 16853.0], [15.3, 16853.0], [15.4, 16861.0], [15.5, 16865.0], [15.6, 16892.0], [15.7, 16905.0], [15.8, 16908.0], [15.9, 16930.0], [16.0, 16930.0], [16.1, 16946.0], [16.2, 16946.0], [16.3, 16948.0], [16.4, 16988.0], [16.5, 17000.0], [16.6, 17003.0], [16.7, 17003.0], [16.8, 17008.0], [16.9, 17013.0], [17.0, 17058.0], [17.1, 17062.0], [17.2, 17062.0], [17.3, 17065.0], [17.4, 17065.0], [17.5, 17088.0], [17.6, 17108.0], [17.7, 17113.0], [17.8, 17115.0], [17.9, 17121.0], [18.0, 17124.0], [18.1, 17126.0], [18.2, 17126.0], [18.3, 17126.0], [18.4, 17148.0], [18.5, 17150.0], [18.6, 17151.0], [18.7, 17181.0], [18.8, 17190.0], [18.9, 17190.0], [19.0, 17199.0], [19.1, 17211.0], [19.2, 17215.0], [19.3, 17219.0], [19.4, 17232.0], [19.5, 17237.0], [19.6, 17237.0], [19.7, 17241.0], [19.8, 17241.0], [19.9, 17252.0], [20.0, 17266.0], [20.1, 17289.0], [20.2, 17293.0], [20.3, 17293.0], [20.4, 17313.0], [20.5, 17320.0], [20.6, 17333.0], [20.7, 17334.0], [20.8, 17342.0], [20.9, 17348.0], [21.0, 17364.0], [21.1, 17364.0], [21.2, 17373.0], [21.3, 17388.0], [21.4, 17401.0], [21.5, 17428.0], [21.6, 17431.0], [21.7, 17432.0], [21.8, 17432.0], [21.9, 17438.0], [22.0, 17449.0], [22.1, 17453.0], [22.2, 17462.0], [22.3, 17475.0], [22.4, 17483.0], [22.5, 17483.0], [22.6, 17489.0], [22.7, 17493.0], [22.8, 17499.0], [22.9, 17503.0], [23.0, 17511.0], [23.1, 17522.0], [23.2, 17522.0], [23.3, 17536.0], [23.4, 17538.0], [23.5, 17539.0], [23.6, 17541.0], [23.7, 17563.0], [23.8, 17569.0], [23.9, 17573.0], [24.0, 17573.0], [24.1, 17574.0], [24.2, 17576.0], [24.3, 17585.0], [24.4, 17592.0], [24.5, 17594.0], [24.6, 17608.0], [24.7, 17608.0], [24.8, 17619.0], [24.9, 17620.0], [25.0, 17622.0], [25.1, 17630.0], [25.2, 17642.0], [25.3, 17644.0], [25.4, 17644.0], [25.5, 17651.0], [25.6, 17652.0], [25.7, 17654.0], [25.8, 17675.0], [25.9, 17677.0], [26.0, 17681.0], [26.1, 17681.0], [26.2, 17684.0], [26.3, 17689.0], [26.4, 17702.0], [26.5, 17704.0], [26.6, 17709.0], [26.7, 17716.0], [26.8, 17721.0], [26.9, 17721.0], [27.0, 17738.0], [27.1, 17742.0], [27.2, 17752.0], [27.3, 17759.0], [27.4, 17761.0], [27.5, 17762.0], [27.6, 17762.0], [27.7, 17775.0], [27.8, 17781.0], [27.9, 17787.0], [28.0, 17798.0], [28.1, 17810.0], [28.2, 17818.0], [28.3, 17818.0], [28.4, 17818.0], [28.5, 17819.0], [28.6, 17820.0], [28.7, 17822.0], [28.8, 17823.0], [28.9, 17823.0], [29.0, 17823.0], [29.1, 17826.0], [29.2, 17829.0], [29.3, 17832.0], [29.4, 17856.0], [29.5, 17862.0], [29.6, 17870.0], [29.7, 17879.0], [29.8, 17879.0], [29.9, 17880.0], [30.0, 17888.0], [30.1, 17906.0], [30.2, 17922.0], [30.3, 17935.0], [30.4, 17940.0], [30.5, 17940.0], [30.6, 17948.0], [30.7, 17949.0], [30.8, 17951.0], [30.9, 17956.0], [31.0, 17961.0], [31.1, 17962.0], [31.2, 17962.0], [31.3, 17975.0], [31.4, 17982.0], [31.5, 17985.0], [31.6, 17986.0], [31.7, 17989.0], [31.8, 17996.0], [31.9, 17996.0], [32.0, 18002.0], [32.1, 18004.0], [32.2, 18007.0], [32.3, 18017.0], [32.4, 18017.0], [32.5, 18025.0], [32.6, 18038.0], [32.7, 18038.0], [32.8, 18056.0], [32.9, 18064.0], [33.0, 18064.0], [33.1, 18073.0], [33.2, 18073.0], [33.3, 18086.0], [33.4, 18086.0], [33.5, 18086.0], [33.6, 18088.0], [33.7, 18091.0], [33.8, 18103.0], [33.9, 18104.0], [34.0, 18114.0], [34.1, 18114.0], [34.2, 18115.0], [34.3, 18115.0], [34.4, 18120.0], [34.5, 18121.0], [34.6, 18124.0], [34.7, 18125.0], [34.8, 18125.0], [34.9, 18127.0], [35.0, 18138.0], [35.1, 18143.0], [35.2, 18145.0], [35.3, 18148.0], [35.4, 18148.0], [35.5, 18158.0], [35.6, 18158.0], [35.7, 18171.0], [35.8, 18176.0], [35.9, 18185.0], [36.0, 18212.0], [36.1, 18212.0], [36.2, 18215.0], [36.3, 18215.0], [36.4, 18224.0], [36.5, 18234.0], [36.6, 18257.0], [36.7, 18268.0], [36.8, 18270.0], [36.9, 18272.0], [37.0, 18272.0], [37.1, 18274.0], [37.2, 18275.0], [37.3, 18275.0], [37.4, 18276.0], [37.5, 18292.0], [37.6, 18294.0], [37.7, 18294.0], [37.8, 18297.0], [37.9, 18301.0], [38.0, 18304.0], [38.1, 18340.0], [38.2, 18343.0], [38.3, 18347.0], [38.4, 18348.0], [38.5, 18348.0], [38.6, 18349.0], [38.7, 18352.0], [38.8, 18356.0], [38.9, 18356.0], [39.0, 18357.0], [39.1, 18362.0], [39.2, 18362.0], [39.3, 18376.0], [39.4, 18402.0], [39.5, 18408.0], [39.6, 18410.0], [39.7, 18411.0], [39.8, 18419.0], [39.9, 18419.0], [40.0, 18436.0], [40.1, 18449.0], [40.2, 18459.0], [40.3, 18468.0], [40.4, 18480.0], [40.5, 18495.0], [40.6, 18495.0], [40.7, 18496.0], [40.8, 18500.0], [40.9, 18507.0], [41.0, 18518.0], [41.1, 18520.0], [41.2, 18521.0], [41.3, 18552.0], [41.4, 18552.0], [41.5, 18556.0], [41.6, 18570.0], [41.7, 18570.0], [41.8, 18571.0], [41.9, 18582.0], [42.0, 18603.0], [42.1, 18603.0], [42.2, 18617.0], [42.3, 18636.0], [42.4, 18640.0], [42.5, 18642.0], [42.6, 18666.0], [42.7, 18694.0], [42.8, 18694.0], [42.9, 18713.0], [43.0, 18719.0], [43.1, 18724.0], [43.2, 18728.0], [43.3, 18733.0], [43.4, 18741.0], [43.5, 18741.0], [43.6, 18742.0], [43.7, 18743.0], [43.8, 18744.0], [43.9, 18749.0], [44.0, 18754.0], [44.1, 18755.0], [44.2, 18782.0], [44.3, 18782.0], [44.4, 18791.0], [44.5, 18793.0], [44.6, 18797.0], [44.7, 18802.0], [44.8, 18808.0], [44.9, 18812.0], [45.0, 18812.0], [45.1, 18818.0], [45.2, 18827.0], [45.3, 18830.0], [45.4, 18844.0], [45.5, 18855.0], [45.6, 18858.0], [45.7, 18858.0], [45.8, 18859.0], [45.9, 18860.0], [46.0, 18866.0], [46.1, 18866.0], [46.2, 18866.0], [46.3, 18867.0], [46.4, 18867.0], [46.5, 18867.0], [46.6, 18867.0], [46.7, 18868.0], [46.8, 18868.0], [46.9, 18869.0], [47.0, 18870.0], [47.1, 18870.0], [47.2, 18870.0], [47.3, 18871.0], [47.4, 18875.0], [47.5, 18876.0], [47.6, 18876.0], [47.7, 18877.0], [47.8, 18888.0], [47.9, 18888.0], [48.0, 18894.0], [48.1, 18899.0], [48.2, 18903.0], [48.3, 18909.0], [48.4, 18910.0], [48.5, 18927.0], [48.6, 18927.0], [48.7, 18927.0], [48.8, 18930.0], [48.9, 18931.0], [49.0, 18932.0], [49.1, 18939.0], [49.2, 18946.0], [49.3, 18946.0], [49.4, 18948.0], [49.5, 18954.0], [49.6, 18962.0], [49.7, 18965.0], [49.8, 18969.0], [49.9, 18975.0], [50.0, 18975.0], [50.1, 18986.0], [50.2, 18987.0], [50.3, 18987.0], [50.4, 19000.0], [50.5, 19007.0], [50.6, 19008.0], [50.7, 19037.0], [50.8, 19037.0], [50.9, 19049.0], [51.0, 19055.0], [51.1, 19061.0], [51.2, 19063.0], [51.3, 19066.0], [51.4, 19071.0], [51.5, 19071.0], [51.6, 19072.0], [51.7, 19073.0], [51.8, 19077.0], [51.9, 19077.0], [52.0, 19084.0], [52.1, 19092.0], [52.2, 19092.0], [52.3, 19092.0], [52.4, 19094.0], [52.5, 19095.0], [52.6, 19102.0], [52.7, 19111.0], [52.8, 19112.0], [52.9, 19112.0], [53.0, 19114.0], [53.1, 19123.0], [53.2, 19125.0], [53.3, 19165.0], [53.4, 19167.0], [53.5, 19171.0], [53.6, 19173.0], [53.7, 19173.0], [53.8, 19182.0], [53.9, 19198.0], [54.0, 19204.0], [54.1, 19212.0], [54.2, 19216.0], [54.3, 19219.0], [54.4, 19219.0], [54.5, 19219.0], [54.6, 19231.0], [54.7, 19249.0], [54.8, 19255.0], [54.9, 19255.0], [55.0, 19255.0], [55.1, 19255.0], [55.2, 19264.0], [55.3, 19265.0], [55.4, 19276.0], [55.5, 19278.0], [55.6, 19281.0], [55.7, 19286.0], [55.8, 19286.0], [55.9, 19298.0], [56.0, 19306.0], [56.1, 19312.0], [56.2, 19327.0], [56.3, 19328.0], [56.4, 19332.0], [56.5, 19334.0], [56.6, 19334.0], [56.7, 19336.0], [56.8, 19354.0], [56.9, 19355.0], [57.0, 19358.0], [57.1, 19362.0], [57.2, 19367.0], [57.3, 19367.0], [57.4, 19375.0], [57.5, 19383.0], [57.6, 19402.0], [57.7, 19413.0], [57.8, 19419.0], [57.9, 19427.0], [58.0, 19427.0], [58.1, 19442.0], [58.2, 19445.0], [58.3, 19449.0], [58.4, 19453.0], [58.5, 19455.0], [58.6, 19461.0], [58.7, 19461.0], [58.8, 19463.0], [58.9, 19463.0], [59.0, 19463.0], [59.1, 19466.0], [59.2, 19476.0], [59.3, 19480.0], [59.4, 19484.0], [59.5, 19484.0], [59.6, 19495.0], [59.7, 19499.0], [59.8, 19502.0], [59.9, 19512.0], [60.0, 19515.0], [60.1, 19522.0], [60.2, 19522.0], [60.3, 19526.0], [60.4, 19528.0], [60.5, 19531.0], [60.6, 19545.0], [60.7, 19545.0], [60.8, 19554.0], [60.9, 19554.0], [61.0, 19575.0], [61.1, 19576.0], [61.2, 19579.0], [61.3, 19584.0], [61.4, 19589.0], [61.5, 19600.0], [61.6, 19600.0], [61.7, 19607.0], [61.8, 19608.0], [61.9, 19618.0], [62.0, 19623.0], [62.1, 19629.0], [62.2, 19631.0], [62.3, 19633.0], [62.4, 19633.0], [62.5, 19636.0], [62.6, 19637.0], [62.7, 19637.0], [62.8, 19660.0], [62.9, 19661.0], [63.0, 19662.0], [63.1, 19662.0], [63.2, 19680.0], [63.3, 19683.0], [63.4, 19688.0], [63.5, 19691.0], [63.6, 19691.0], [63.7, 19699.0], [63.8, 19699.0], [63.9, 19702.0], [64.0, 19710.0], [64.1, 19717.0], [64.2, 19724.0], [64.3, 19726.0], [64.4, 19752.0], [64.5, 19752.0], [64.6, 19755.0], [64.7, 19767.0], [64.8, 19770.0], [64.9, 19772.0], [65.0, 19784.0], [65.1, 19791.0], [65.2, 19792.0], [65.3, 19792.0], [65.4, 19803.0], [65.5, 19806.0], [65.6, 19828.0], [65.7, 19831.0], [65.8, 19839.0], [65.9, 19861.0], [66.0, 19861.0], [66.1, 19862.0], [66.2, 19883.0], [66.3, 19884.0], [66.4, 19907.0], [66.5, 19916.0], [66.6, 19917.0], [66.7, 19917.0], [66.8, 19919.0], [66.9, 19919.0], [67.0, 19921.0], [67.1, 19923.0], [67.2, 19924.0], [67.3, 19925.0], [67.4, 19925.0], [67.5, 19927.0], [67.6, 19932.0], [67.7, 19932.0], [67.8, 19933.0], [67.9, 19942.0], [68.0, 19947.0], [68.1, 19955.0], [68.2, 19955.0], [68.3, 19961.0], [68.4, 19984.0], [68.5, 19999.0], [68.6, 20002.0], [68.7, 20004.0], [68.8, 20005.0], [68.9, 20005.0], [69.0, 20011.0], [69.1, 20015.0], [69.2, 20017.0], [69.3, 20029.0], [69.4, 20036.0], [69.5, 20037.0], [69.6, 20037.0], [69.7, 20038.0], [69.8, 20045.0], [69.9, 20048.0], [70.0, 20056.0], [70.1, 20057.0], [70.2, 20060.0], [70.3, 20060.0], [70.4, 20066.0], [70.5, 20067.0], [70.6, 20089.0], [70.7, 20095.0], [70.8, 20096.0], [70.9, 20110.0], [71.0, 20123.0], [71.1, 20123.0], [71.2, 20128.0], [71.3, 20132.0], [71.4, 20139.0], [71.5, 20144.0], [71.6, 20151.0], [71.7, 20155.0], [71.8, 20155.0], [71.9, 20156.0], [72.0, 20168.0], [72.1, 20169.0], [72.2, 20178.0], [72.3, 20187.0], [72.4, 20192.0], [72.5, 20192.0], [72.6, 20212.0], [72.7, 20213.0], [72.8, 20219.0], [72.9, 20229.0], [73.0, 20236.0], [73.1, 20256.0], [73.2, 20256.0], [73.3, 20262.0], [73.4, 20262.0], [73.5, 20263.0], [73.6, 20265.0], [73.7, 20278.0], [73.8, 20286.0], [73.9, 20289.0], [74.0, 20289.0], [74.1, 20293.0], [74.2, 20295.0], [74.3, 20300.0], [74.4, 20304.0], [74.5, 20308.0], [74.6, 20312.0], [74.7, 20312.0], [74.8, 20329.0], [74.9, 20331.0], [75.0, 20334.0], [75.1, 20351.0], [75.2, 20386.0], [75.3, 20390.0], [75.4, 20390.0], [75.5, 20395.0], [75.6, 20403.0], [75.7, 20407.0], [75.8, 20416.0], [75.9, 20420.0], [76.0, 20425.0], [76.1, 20425.0], [76.2, 20425.0], [76.3, 20434.0], [76.4, 20456.0], [76.5, 20459.0], [76.6, 20462.0], [76.7, 20473.0], [76.8, 20480.0], [76.9, 20480.0], [77.0, 20480.0], [77.1, 20484.0], [77.2, 20488.0], [77.3, 20499.0], [77.4, 20500.0], [77.5, 20502.0], [77.6, 20502.0], [77.7, 20509.0], [77.8, 20536.0], [77.9, 20540.0], [78.0, 20551.0], [78.1, 20552.0], [78.2, 20557.0], [78.3, 20557.0], [78.4, 20562.0], [78.5, 20578.0], [78.6, 20579.0], [78.7, 20579.0], [78.8, 20599.0], [78.9, 20600.0], [79.0, 20600.0], [79.1, 20604.0], [79.2, 20614.0], [79.3, 20622.0], [79.4, 20628.0], [79.5, 20641.0], [79.6, 20645.0], [79.7, 20668.0], [79.8, 20668.0], [79.9, 20671.0], [80.0, 20683.0], [80.1, 20701.0], [80.2, 20701.0], [80.3, 20703.0], [80.4, 20706.0], [80.5, 20706.0], [80.6, 20722.0], [80.7, 20725.0], [80.8, 20739.0], [80.9, 20745.0], [81.0, 20770.0], [81.1, 20770.0], [81.2, 20770.0], [81.3, 20789.0], [81.4, 20791.0], [81.5, 20803.0], [81.6, 20806.0], [81.7, 20820.0], [81.8, 20865.0], [81.9, 20865.0], [82.0, 20883.0], [82.1, 20893.0], [82.2, 20899.0], [82.3, 20913.0], [82.4, 20918.0], [82.5, 20925.0], [82.6, 20929.0], [82.7, 20929.0], [82.8, 20939.0], [82.9, 20944.0], [83.0, 20970.0], [83.1, 20975.0], [83.2, 20978.0], [83.3, 20983.0], [83.4, 20983.0], [83.5, 20987.0], [83.6, 20991.0], [83.7, 20991.0], [83.8, 21004.0], [83.9, 21004.0], [84.0, 21005.0], [84.1, 21005.0], [84.2, 21005.0], [84.3, 21010.0], [84.4, 21017.0], [84.5, 21017.0], [84.6, 21045.0], [84.7, 21064.0], [84.8, 21064.0], [84.9, 21085.0], [85.0, 21131.0], [85.1, 21168.0], [85.2, 21175.0], [85.3, 21179.0], [85.4, 21197.0], [85.5, 21197.0], [85.6, 21197.0], [85.7, 21207.0], [85.8, 21239.0], [85.9, 21246.0], [86.0, 21295.0], [86.1, 21302.0], [86.2, 21305.0], [86.3, 21305.0], [86.4, 21342.0], [86.5, 21364.0], [86.6, 21369.0], [86.7, 21376.0], [86.8, 21396.0], [86.9, 21403.0], [87.0, 21403.0], [87.1, 21416.0], [87.2, 21417.0], [87.3, 21419.0], [87.4, 21420.0], [87.5, 21446.0], [87.6, 21458.0], [87.7, 21458.0], [87.8, 21471.0], [87.9, 21486.0], [88.0, 21493.0], [88.1, 21504.0], [88.2, 21504.0], [88.3, 21509.0], [88.4, 21576.0], [88.5, 21576.0], [88.6, 21602.0], [88.7, 21620.0], [88.8, 21620.0], [88.9, 21625.0], [89.0, 21626.0], [89.1, 21656.0], [89.2, 21656.0], [89.3, 21664.0], [89.4, 21694.0], [89.5, 21706.0], [89.6, 21755.0], [89.7, 21804.0], [89.8, 21839.0], [89.9, 21839.0], [90.0, 21859.0], [90.1, 21868.0], [90.2, 21872.0], [90.3, 21964.0], [90.4, 21984.0], [90.5, 21994.0], [90.6, 21994.0], [90.7, 22003.0], [90.8, 22011.0], [90.9, 22056.0], [91.0, 22078.0], [91.1, 22086.0], [91.2, 22099.0], [91.3, 22100.0], [91.4, 22100.0], [91.5, 22111.0], [91.6, 22116.0], [91.7, 22117.0], [91.8, 22119.0], [91.9, 22131.0], [92.0, 22137.0], [92.1, 22137.0], [92.2, 22159.0], [92.3, 22199.0], [92.4, 22214.0], [92.5, 22259.0], [92.6, 22284.0], [92.7, 22308.0], [92.8, 22308.0], [92.9, 22334.0], [93.0, 22394.0], [93.1, 22412.0], [93.2, 22437.0], [93.3, 22457.0], [93.4, 22467.0], [93.5, 22467.0], [93.6, 22474.0], [93.7, 22489.0], [93.8, 22502.0], [93.9, 22513.0], [94.0, 22588.0], [94.1, 22611.0], [94.2, 22612.0], [94.3, 22612.0], [94.4, 22615.0], [94.5, 22708.0], [94.6, 22721.0], [94.7, 22764.0], [94.8, 22768.0], [94.9, 22868.0], [95.0, 22868.0], [95.1, 23019.0], [95.2, 23034.0], [95.3, 23042.0], [95.4, 23099.0], [95.5, 23115.0], [95.6, 23160.0], [95.7, 23160.0], [95.8, 23177.0], [95.9, 23207.0], [96.0, 23209.0], [96.1, 23217.0], [96.2, 23217.0], [96.3, 23264.0], [96.4, 23264.0], [96.5, 23298.0], [96.6, 23307.0], [96.7, 23332.0], [96.8, 23385.0], [96.9, 23419.0], [97.0, 23420.0], [97.1, 23467.0], [97.2, 23467.0], [97.3, 23603.0], [97.4, 23716.0], [97.5, 23784.0], [97.6, 23841.0], [97.7, 23869.0], [97.8, 24001.0], [97.9, 24001.0], [98.0, 24035.0], [98.1, 24441.0], [98.2, 24466.0], [98.3, 24676.0], [98.4, 24754.0], [98.5, 24813.0], [98.6, 24813.0], [98.7, 24880.0], [98.8, 25141.0], [98.9, 25157.0], [99.0, 25259.0], [99.1, 25325.0], [99.2, 25482.0], [99.3, 25482.0], [99.4, 25541.0], [99.5, 25788.0], [99.6, 26146.0], [99.7, 33448.0], [99.8, 33606.0], [99.9, 34179.0], [100.0, 34179.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1300.0, "maxY": 60.0, "series": [{"data": [[34100.0, 2.0], [1300.0, 12.0], [1400.0, 2.0], [1600.0, 4.0], [1700.0, 2.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 2.0], [2200.0, 2.0], [2300.0, 2.0], [2500.0, 6.0], [2800.0, 6.0], [2700.0, 4.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 2.0], [3200.0, 4.0], [3400.0, 2.0], [3600.0, 14.0], [3700.0, 2.0], [3800.0, 2.0], [4000.0, 4.0], [4100.0, 6.0], [4200.0, 2.0], [4300.0, 2.0], [4600.0, 2.0], [4500.0, 4.0], [4400.0, 2.0], [5100.0, 2.0], [4900.0, 4.0], [5200.0, 2.0], [5600.0, 4.0], [5700.0, 2.0], [5800.0, 2.0], [6100.0, 4.0], [6000.0, 2.0], [6200.0, 2.0], [6500.0, 2.0], [8300.0, 2.0], [9100.0, 2.0], [11000.0, 2.0], [11600.0, 4.0], [12000.0, 2.0], [12400.0, 4.0], [12900.0, 4.0], [13100.0, 2.0], [13000.0, 2.0], [13600.0, 2.0], [14200.0, 2.0], [14500.0, 2.0], [14600.0, 2.0], [15300.0, 6.0], [15000.0, 4.0], [15100.0, 4.0], [14900.0, 2.0], [15400.0, 6.0], [15800.0, 2.0], [15600.0, 2.0], [15700.0, 2.0], [16000.0, 6.0], [15900.0, 2.0], [16300.0, 6.0], [16200.0, 8.0], [17300.0, 18.0], [17000.0, 18.0], [17100.0, 26.0], [17400.0, 26.0], [16500.0, 14.0], [16700.0, 30.0], [16800.0, 12.0], [16400.0, 2.0], [17200.0, 22.0], [16600.0, 6.0], [16900.0, 14.0], [17500.0, 30.0], [17600.0, 30.0], [18200.0, 32.0], [17700.0, 30.0], [18100.0, 38.0], [17900.0, 32.0], [18300.0, 26.0], [17800.0, 34.0], [18000.0, 32.0], [18400.0, 24.0], [18600.0, 14.0], [19000.0, 38.0], [19100.0, 24.0], [19400.0, 38.0], [18700.0, 32.0], [18800.0, 60.0], [19200.0, 34.0], [18900.0, 38.0], [19300.0, 28.0], [18500.0, 22.0], [20300.0, 22.0], [19600.0, 40.0], [20000.0, 40.0], [19500.0, 30.0], [20100.0, 28.0], [19700.0, 26.0], [20200.0, 30.0], [19800.0, 18.0], [19900.0, 38.0], [20400.0, 32.0], [21400.0, 20.0], [21100.0, 12.0], [20600.0, 20.0], [21300.0, 14.0], [21200.0, 8.0], [20500.0, 26.0], [20700.0, 24.0], [21000.0, 20.0], [21500.0, 8.0], [20800.0, 14.0], [20900.0, 26.0], [22400.0, 12.0], [21800.0, 10.0], [22100.0, 18.0], [22500.0, 6.0], [22300.0, 6.0], [22000.0, 12.0], [21600.0, 16.0], [21700.0, 4.0], [22200.0, 6.0], [21900.0, 6.0], [22700.0, 8.0], [23200.0, 12.0], [23300.0, 6.0], [22600.0, 6.0], [23100.0, 6.0], [23000.0, 8.0], [23400.0, 6.0], [22800.0, 2.0], [24000.0, 4.0], [24400.0, 4.0], [23700.0, 4.0], [23800.0, 4.0], [23600.0, 2.0], [24700.0, 2.0], [25100.0, 4.0], [24800.0, 4.0], [25400.0, 2.0], [25200.0, 2.0], [24600.0, 2.0], [25500.0, 2.0], [25300.0, 2.0], [26100.0, 2.0], [25700.0, 2.0], [33400.0, 2.0], [33600.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 34100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 855.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 855.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 166.76856649395503, "minX": 1.57793106E12, "maxY": 178.79505300353355, "series": [{"data": [[1.57793106E12, 178.79505300353355], [1.57793112E12, 166.76856649395503]], "isOverall": false, "label": "Login Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57793112E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1379.4, "minX": 1.0, "maxY": 24072.0, "series": [{"data": [[2.0, 13006.0], [17.0, 15728.0], [22.0, 16864.473684210516], [23.0, 20500.0], [24.0, 17677.0], [25.0, 20139.0], [31.0, 17706.166666666668], [33.0, 16892.0], [32.0, 17453.0], [34.0, 17585.0], [36.0, 12770.0], [37.0, 1379.4], [38.0, 1444.0], [39.0, 17690.0], [40.0, 17088.0], [44.0, 13371.25], [45.0, 9775.0], [46.0, 20473.0], [49.0, 9269.0], [48.0, 16754.0], [52.0, 17373.0], [56.0, 2291.0], [58.0, 1975.0], [63.0, 2091.0], [67.0, 2529.0], [71.0, 18506.565217391304], [74.0, 17241.0], [73.0, 17364.0], [72.0, 16566.0], [76.0, 13274.333333333334], [77.0, 2705.285714285714], [80.0, 2772.0], [82.0, 2738.0], [86.0, 15930.636363636362], [88.0, 12302.333333333334], [89.0, 11444.5], [91.0, 16432.0], [90.0, 18582.0], [93.0, 10181.5], [94.0, 16394.0], [92.0, 17266.0], [97.0, 10062.0], [99.0, 11051.5], [98.0, 16339.0], [96.0, 18923.5], [103.0, 9947.5], [102.0, 16747.0], [101.0, 17008.0], [100.0, 16686.0], [105.0, 12598.0], [106.0, 3679.0], [107.0, 16732.5], [104.0, 16865.0], [111.0, 18158.0], [110.0, 19680.0], [109.0, 18115.0], [108.0, 18376.0], [114.0, 11359.0], [115.0, 18073.0], [113.0, 19354.0], [112.0, 19907.0], [119.0, 4056.5], [116.0, 16082.0], [120.0, 4115.0], [121.0, 18594.6], [126.0, 15440.5], [127.0, 17654.0], [124.0, 18012.0], [128.0, 11382.0], [129.0, 10995.5], [130.0, 4633.0], [131.0, 8767.166666666666], [133.0, 11852.5], [135.0, 18500.0], [134.0, 18827.0], [132.0, 15838.0], [139.0, 4606.25], [147.0, 4963.0], [150.0, 17664.062500000004], [151.0, 10555.0], [159.0, 15308.0], [157.0, 18076.0], [154.0, 18103.0], [153.0, 17428.0], [152.0, 18349.0], [160.0, 6012.0], [167.0, 17062.0], [166.0, 18694.0], [165.0, 17829.0], [164.0, 18812.0], [163.0, 17000.0], [162.0, 18347.0], [161.0, 17860.666666666664], [168.0, 9620.0], [169.0, 9992.333333333332], [173.0, 17539.0], [172.0, 17948.0], [171.0, 17820.0], [183.0, 20770.0], [182.0, 20038.0], [181.0, 24035.0], [180.0, 20983.0], [179.0, 18859.0], [178.0, 21576.0], [177.0, 18749.0], [176.0, 18911.333333333336], [191.0, 17211.0], [190.0, 16706.0], [189.0, 21755.0], [188.0, 21984.0], [187.0, 22588.0], [186.0, 20770.0], [185.0, 24072.0], [199.0, 20351.0], [198.0, 21214.0], [197.0, 20546.666666666668], [194.0, 20861.666666666668], [200.0, 19657.487479131894], [1.0, 12456.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[170.71693735498897, 18165.41415313228]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.57793106E12, "maxY": 7795.483333333334, "series": [{"data": [[1.57793106E12, 3808.8], [1.57793112E12, 7795.483333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57793106E12, 0.0], [1.57793112E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57793112E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16528.1342756184, "minX": 1.57793106E12, "maxY": 18965.673575129527, "series": [{"data": [[1.57793106E12, 16528.1342756184], [1.57793112E12, 18965.673575129527]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57793112E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16503.466431095418, "minX": 1.57793106E12, "maxY": 18948.633851468087, "series": [{"data": [[1.57793106E12, 16503.466431095418], [1.57793112E12, 18948.633851468087]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57793112E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 80.99293286219076, "minX": 1.57793106E12, "maxY": 87.24006908462864, "series": [{"data": [[1.57793106E12, 80.99293286219076], [1.57793112E12, 87.24006908462864]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57793112E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1351.0, "minX": 1.57793106E12, "maxY": 34179.0, "series": [{"data": [[1.57793106E12, 34179.0], [1.57793112E12, 25788.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57793106E12, 1351.0], [1.57793112E12, 12456.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57793106E12, 23213.8], [1.57793112E12, 20913.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57793106E12, 33473.280000000006], [1.57793112E12, 23295.200000000008]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57793106E12, 24461.0], [1.57793112E12, 21493.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57793112E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1387.5, "minX": 1.0, "maxY": 22373.0, "series": [{"data": [[8.0, 5653.5], [2.0, 17246.5], [32.0, 17486.5], [36.0, 18841.0], [38.0, 17420.5], [10.0, 1387.5], [40.0, 20160.0], [42.0, 22373.0], [46.0, 19537.0], [3.0, 19264.0], [51.0, 20168.0], [13.0, 12080.5], [14.0, 2837.5], [15.0, 18868.0], [4.0, 18434.5], [1.0, 17720.0], [5.0, 18636.0], [94.0, 17821.5], [6.0, 19220.5], [101.0, 19298.0], [7.0, 21984.0], [29.0, 18871.0], [30.0, 19460.5], [31.0, 21005.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 101.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1387.5, "minX": 1.0, "maxY": 22373.0, "series": [{"data": [[8.0, 5525.0], [2.0, 17246.5], [32.0, 17486.5], [36.0, 18841.0], [38.0, 17420.5], [10.0, 1387.5], [40.0, 20159.5], [42.0, 22373.0], [46.0, 19537.0], [3.0, 19264.0], [51.0, 20167.0], [13.0, 12080.0], [14.0, 2837.5], [15.0, 18868.0], [4.0, 18332.5], [1.0, 17720.0], [5.0, 18636.0], [94.0, 17821.5], [6.0, 19220.5], [101.0, 19298.0], [7.0, 21984.0], [29.0, 18871.0], [30.0, 19395.0], [31.0, 21005.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 101.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.316666666666666, "minX": 1.57793106E12, "maxY": 8.05, "series": [{"data": [[1.57793106E12, 8.05], [1.57793112E12, 6.316666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57793112E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.716666666666667, "minX": 1.57793106E12, "maxY": 9.65, "series": [{"data": [[1.57793106E12, 4.716666666666667], [1.57793112E12, 9.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57793112E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9.433333333333334, "minX": 1.57793106E12, "maxY": 19.3, "series": [{"data": [[1.57793106E12, 9.433333333333334], [1.57793112E12, 19.3]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57793112E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.433333333333334, "minX": 1.57793106E12, "maxY": 19.3, "series": [{"data": [[1.57793106E12, 9.433333333333334], [1.57793112E12, 19.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57793112E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

